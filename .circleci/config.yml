
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0
 
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://proj3-<< pipeline.parameters.workflow-id >>
            aws cloudformation delete-stack \
              --stack-name "proj3-backend-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack \
              --stack-name "proj3-frontend-<< pipeline.parameters.workflow-id >>"
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

jobs:

  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontendCache]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v2-frontendCache  # -<< pipeline.id >>

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v2-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: v2-backend-build  # -<< pipeline.id >>
      - save_cache:
          paths: [backend/dist]
          key: backend-dist  # -<< pipeline.id >>

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v2-frontendCache"]  # -<< pipeline.id >>"
      - run:
          name: Font-end test
          command: |
            cd frontend
            npm run test

  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]  # -<< pipeline.id >>"
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
       
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v2-frontendCache"]  # -<< pipeline.id >>"
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
 
  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v2-backend-build"]  # -<< pipeline.id >>"
      - run:
          name: Back-end security scan
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical          

  create-infrastructure:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "proj3-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=proj3
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "proj3-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=proj3
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=proj3" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Save backend URL in memstash - go to MemStash.io, add key= BACKEND_IP, value= http://$BACKEND_IP:3030
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=proj3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)   

            curl -H "Content-Type: text/plain" -H "token: b392d221-f54f-416d-a0e7-247f870c8a8c" --request PUT --data ""http://$BACKEND_IP:3030"" https://api.memstash.io/values/BACKEND_URL           
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment
           
  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["65:fe:05:c9:b0:67:f6:01:25:aa:40:8f:ed:51:5c:ce"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            cat inventory.txt
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml        
      - destroy_environment

          
workflows:
  default:
    jobs:
      - build-frontend   
      - build-backend
      - test-frontend:
          requires: [build-frontend]     
      - test-backend:
          requires: [build-backend] 
      - scan-frontend:
          requires: [build-frontend]          
      - scan-backend:
          requires: [build-backend]          
      - create-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [create-infrastructure]            
     