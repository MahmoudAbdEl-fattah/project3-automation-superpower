
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  slack: circleci/slack@4.1

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: | 
            aws s3 rb s3://proj3-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name  proj3-backend-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name  proj3-frontend-<< parameters.workflow-id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            migrations=$(curl -H "token: e4eb2ece-7512-4ace-85dc-bc851a1cf516" --request GET https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7})
            if(( migrations==1 )); 
            then
              cd ~/project/backend   
              npm install       
              npm run migrations:revert
            fi

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.7-alpine3.11
  aws:
    docker:
      - image: amazon/aws-cli

jobs:

  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v4-frontendCache]
      - run:
          name: Build frontend
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v4-frontendCache  


  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v4-backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: v4-backend-build  
      - save_cache:
          paths: [backend/dist]
          key: v4-backend-dist  

          
  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v4-frontendCache"]  
      - run:
          name: Fontend test
          no_output_timeout: 30m          
          command: |
            cd frontend
            npm run test

  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v4-backend-build"]  
      - run:
          name: Backend test
          command: |
            cd backend
            npm run test
      - slack/notify:
          channel: '#devops-project-3-autumation-super-power'
          event: fail
          template: basic_fail_1       
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v4-frontendCache"]  
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit --audit-level=critical
 
  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v4-backend-build"]  
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical          

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup      
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "proj3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=proj3
      - run:
          name: Save backend URL in memstash to reuse it in frontend deploying - go to MemStash.io, add key= BACKEND_IP, value= http://$BACKEND_IP:3030
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=proj3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)   

            curl -H "Content-Type: text/plain" -H "token: b392d221-f54f-416d-a0e7-247f870c8a8c" --request PUT --data ""http://$BACKEND_IP:3030"" https://api.memstash.io/values/BACKEND_URL           
               
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "proj3-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=proj3
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=proj3" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
                 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:d9:ea:e3:5e:a7:56:05:40:f2:8f:f9:a2:49:64:94"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update tar gzip ansible curl
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |      
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v4-backend-build"]          
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: e4eb2ece-7512-4ace-85dc-bc851a1cf516" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: 09307427-b13e-44a4-9372-357a0b1f40a2" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"     
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v4-frontendCache]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Build frontend
          command: |
            cd frontend
            ls -la
            npm run build            
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://proj3-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:d9:ea:e3:5e:a7:56:05:40:f2:8f:f9:a2:49:64:94"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip 
      - restore_cache:
          keys: ["v3-backend-dist"]  
      - run:
          name: Deploy backend
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend/dist
      - run:
          name: backend server
          no_output_timeout: 30m
          command: |      
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment
      - revert-migrations

  smoke-test:
    executor: python
    steps:
      - checkout    
      - run:
          name: Install dependencies
          command: |   
            apk add --update tar gzip curl nodejs npm 
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi            
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://proj3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"
            echo "$URL"
            if curl -s $URL | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get old stack workflow id & Update cloudfront distribution
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --region us-east-1 --no-paginate --output text >> ./.circleci/oldworkflowid.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name cloudfront-distro \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=proj3
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/oldworkflowid.txt
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id back & Remove old stacks and files
          command: |
            cat ./.circleci/oldworkflowid.txt
            OldWorkflowID=$(head -n 1 ./.circleci/oldworkflowid.txt)

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "${STACKS}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
              aws s3 rm s3://proj3-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "proj3-backend-prod-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "proj3-frontend-prod-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:   

      - create-infrastructure:
         # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [create-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]      
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
